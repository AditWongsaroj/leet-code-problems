package threeSumClosest

import (
	"testing"

	"github.com/google/go-cmp/cmp"
)

func TestArray(t *testing.T) {
	for _, c := range []struct {
		nums []int
		target int
		want int
	}{
		{[]int{-1,2,1,-4}, 1, 2},
		{[]int{0,0,0}, 1, 0},
		{[]int{4,-1,2,1,-4}, 1, 1},
		{[]int{-407,-150,270,-239,850,141,-943,-500,719,-361,607,945,-474,-41,457,854,239,-101,943,82,338,-605,653,411,-185,-420,-209,234,324,991,224,-602,-894,-805,-231,801,-531,165,247,-72,-566,920,-7,959,365,-28,-975,166,735,233,221,-372,941,-907,-870,732,-849,382,-965,-867,-883,-990,488,480,963,109,399,664,508,-520,301,330,452,501,700,621,-98,994,248,-11,898,678,-226,368,167,-644,272,71,544,-703,-173,-510,-346,807,846,613,795,-774,610,-537,282,327,-187,-133,741,904,-625,-419,-116,-728,-868,661,985,190,-587,-33,-825,-652,-343,-959,-534,811,-39,717,-768,-503,833,389,215,-683,172,-801,-269,836,339,-612,-470,232,-18,214,46,-887,668,-756,-89,-477,294,815,-600,520,576,-514,-951,163,567,-538,61,206,663,-690,132,-450,-358,-408,16,407,76,262,-619,222,-204,74,768,362,-140,423,-505,359,459,539,990,-785,-853,123,-266,885,-986,440,435,745,859,315,588,288,728,193,-308,757,-68,639,-241,113,-504,606,446,783,511,265,195,203,200,208,367,-909,7,95,-424,777,-642,377,656,679,376,-903,-265,-305,-762,419,432,-663,-896,456,374,329,-561,-492,495,-225,-752,665,802,-302,-845,129,47,816,825,-730,518,196,-56,755,-922,-974,519,-401,43,155,939,67,-516,-952,477,396,-280,595,-242,503,-682,-498,563,-671,216,-329,387,180,84,212,-432,888,619,-331,-645,-544,131,198,458,483,51,927,-942,954,703,-725,-941,650,-240,-356,-495,81,295,127,900,-835,49,782,-249,-581,-927,9,620,428,-84,731,748,877,-338,-146,509,-430,-279,-919,-481,-324,169,335,-446,492,-564,691,561,36,671,-963,-589,-567,355,-253,-13,-224,643,188,-236,-190,-524,525,328,-169,-640,934,-309,-117,-972,828,821,835,548,424,325,-747,-189,861,259,86,-749,848,973,529,-609,-742,-34,-918,-336,476,635,0,-167,-525,-786,759,70,174,-557,-761,626,-984,-466,-461,6,358,545,-389,-203,864,-322,-876,-340,-623,-271,-788,341,-23,391,911,-553,723,-677,-289,-958,-790,-460,185,-139,872,832,531,463,-511,-425,-750,-65,866,173,-980,-411,-857,-859,-954,103,948,590,704,944,72,474,710,-789,-604,385,-205,-105,-541,-548,961,322,-141,175,-831,126,533,-850,-344,189,-753,906,-713,-772,229,413,853,418,-807,-488,-616,85,-262,245,-740,-9,-721,886,587,761,176,253,-375,481,331,-417,528,-746,345,405,718,-387,-782,-571,332,-251,187,-844,-877,-583,-748,-373,-44,662,839,-17,863}, 2920, 2920},

	} {
		got := threeSumClosest(c.nums, c.target)
		if !cmp.Equal(got, c.want) {
			t.Errorf("got == %v, want %v", got, c.want)
		}
	}
}

